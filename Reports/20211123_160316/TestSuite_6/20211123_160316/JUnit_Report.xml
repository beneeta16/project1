<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="TestSuite_6" time="304.255" tests="1" failures="0" errors="0">
   <testsuite name="TestSuite_6" tests="1" failures="0" errors="0" time="304.255" skipped="0" timestamp="2021-11-23 16:03:28" hostname="HP - LAPTOP-EDP04F0V" id="Test Suites/TestSuite_6">
      <properties>
         <property name="deviceName" value=""/>
         <property name="devicePlatform" value=""/>
         <property name="logFolder" value="C:\\Users\\HP\\Katalon Studio\\Project_1\\Reports\\20211123_160316\\TestSuite_6\\20211123_160316"/>
         <property name="logFiles" value="C:\\Users\\HP\\Katalon Studio\\Project_1\\Reports\\20211123_160316\\TestSuite_6\\20211123_160316\\execution0.log"/>
         <property name="attachments" value=""/>
         <property name="hostName" value="HP - LAPTOP-EDP04F0V"/>
         <property name="os" value="Windows 10 64bit"/>
         <property name="katalonVersion" value="8.2.0.208"/>
         <property name="browser" value="Chrome 96.0.4664.45"/>
         <property name="hostAddress" value="192.168.56.1"/>
         <property name="sessionId" value="1ed79d17140950fb013efed0cd33a222"/>
         <property name="seleniumVersion" value="3.141.59"/>
         <property name="proxyInformation" value="ProxyInformation { proxyOption=NO_PROXY, proxyServerType=HTTP, username=, password=********, proxyServerAddress=, proxyServerPort=0, executionList=&quot;&quot;, isApplyToDesiredCapabilities=true }"/>
         <property name="platform" value="Windows 10"/>
      </properties>
      <testcase name="Test Cases/TC-06-VerifyProductManuals" time="303.92" classname="Test Cases/TC-06-VerifyProductManuals" status="PASSED">
         <system-out><![CDATA[2021-11-23 16:03:28 - [TEST_CASE][PASSED] - Test Cases/TC-06-VerifyProductManuals: Test Cases/TC-06-VerifyProductManuals

2021-11-23 16:03:30 - [TEST_STEP][PASSED] - callTestCase(findTestCase("TC-01-VerifyLogin"), [:], STOP_ON_FAILURE): Call Test Case 'Test Cases/TC-01-VerifyLogin' successfully

2021-11-23 16:03:30 - [TEST_CASE][PASSED] - Test Cases/TC-01-VerifyLogin: Test Cases/TC-01-VerifyLogin

2021-11-23 16:03:30 - [TEST_STEP][PASSED] - openBrowser(findTestData("Login_Credentials").getValue("Input URL", 1)): Browser is opened with url: 'https://hfx-cadence.cs197.force.com/UnifiedSSO/CadenceApplicationLoginScreen?appcode=cos&langcode=en'

2021-11-23 16:03:31 - [MESSAGE][INFO] - Starting 'Chrome' driver

2021-11-23 16:03:31 - [MESSAGE][INFO] - Action delay is set to 0 milliseconds

2021-11-23 16:03:39 - [MESSAGE][PASSED] - Browser is opened with url: 'https://hfx-cadence.cs197.force.com/UnifiedSSO/CadenceApplicationLoginScreen?appcode=cos&langcode=en'

2021-11-23 16:03:39 - [TEST_STEP][PASSED] - setText(findTestObject("Login_OR/UserName_Field"), findTestData("Login_Credentials").getValue("User Name", 1)): Text 'auto_swhostiduser1.en@cssotest.com' is set on object 'Object Repository/Login_OR/UserName_Field'

2021-11-23 16:03:42 - [MESSAGE][PASSED] - Text 'auto_swhostiduser1.en@cssotest.com' is set on object 'Object Repository/Login_OR/UserName_Field'

2021-11-23 16:03:42 - [TEST_STEP][PASSED] - setText(findTestObject("Login_OR/Password_Field"), findTestData("Login_Credentials").getValue("Password", 1)): Text 'Cadence123' is set on object 'Object Repository/Login_OR/Password_Field'

2021-11-23 16:03:43 - [MESSAGE][PASSED] - Text 'Cadence123' is set on object 'Object Repository/Login_OR/Password_Field'

2021-11-23 16:03:43 - [TEST_STEP][PASSED] - click(findTestObject("Login_OR/Login_Button_Field")): Object: 'Object Repository/Login_OR/Login_Button_Field' is clicked on

2021-11-23 16:04:01 - [MESSAGE][PASSED] - Object: 'Object Repository/Login_OR/Login_Button_Field' is clicked on

2021-11-23 16:04:01 - [TEST_STEP][PASSED] - verifyElementPresent(findTestObject("Login_OR/UserLogo"), 0): Object 'Object Repository/Login_OR/UserLogo' is present

2021-11-23 16:04:01 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2021-11-23 16:04:03 - [MESSAGE][PASSED] - Object 'Object Repository/Login_OR/UserLogo' is present

2021-11-23 16:04:03 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/TC-01-VerifyLogin' successfully

2021-11-23 16:04:03 - [TEST_STEP][PASSED] - maximizeWindow(): Current window maximized

2021-11-23 16:04:03 - [MESSAGE][PASSED] - Current window maximized

2021-11-23 16:04:03 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Resources_Dropdown_OR/Resources_option_location")): Object 'Object Repository/Resources_Dropdown_OR/Resources_option_location' is visible

2021-11-23 16:04:04 - [MESSAGE][PASSED] - Object 'Object Repository/Resources_Dropdown_OR/Resources_option_location' is visible

2021-11-23 16:04:04 - [TEST_STEP][PASSED] - verifyElementText(findTestObject("Resources_Dropdown_OR/Resources_option_location"), "Resources"): Actual text and expected text of test object 'Object Repository/Resources_Dropdown_OR/Resources_option_location' are matched.

2021-11-23 16:04:04 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Resources_Dropdown_OR/Resources_option_location' are matched.

2021-11-23 16:04:04 - [TEST_STEP][PASSED] - mouseOver(findTestObject("Resources_Dropdown_OR/Resources_option_location")): Object: 'Object Repository/Resources_Dropdown_OR/Resources_option_location' is hovered

2021-11-23 16:04:05 - [MESSAGE][PASSED] - Object: 'Object Repository/Resources_Dropdown_OR/Resources_option_location' is hovered

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - optionToBeChecked = driver.findElement(By.xpath("//*[@id='navbarCollapse']/ul/li[4]/div/ul/li[4]/a")): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - isOptionVisible = optionToBeChecked.isDisplayed(): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - out.println(isOptionVisible): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - isthewordPresent = getText().contains("Product Manuals"): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - out.println(isthewordPresent): null

2021-11-23 16:04:05 - [TEST_STEP][PASSED] - optionToBeChecked.click(): null

2021-11-23 16:04:10 - [TEST_STEP][PASSED] - actualTitle = getWindowTitle(): Current window's title is: 'Product Manuals'

2021-11-23 16:04:10 - [MESSAGE][PASSED] - Current window's title is: 'Product Manuals'

2021-11-23 16:04:10 - [TEST_STEP][PASSED] - verifyMatch(actualTitle, "Product Manuals", true): Actual text 'Product Manuals' and expected text 'Product Manuals' are matched  using regular expression

2021-11-23 16:04:10 - [MESSAGE][PASSED] - Actual text 'Product Manuals' and expected text 'Product Manuals' are matched  using regular expression

2021-11-23 16:04:10 - [TEST_STEP][PASSED] - verifyElementText(findTestObject("Search_Result_Page_OR/Pagehead_location"), "Product Manuals"): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Pagehead_location' are matched.

2021-11-23 16:04:11 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Pagehead_location' are matched.

2021-11-23 16:04:11 - [TEST_STEP][PASSED] - isBreadcrumbPresent = xpath("//ul[@class = 'breadcrumb']")).isDisplayed(): null

2021-11-23 16:04:11 - [TEST_STEP][PASSED] - out.println(isBreadcrumbPresent): null

2021-11-23 16:04:11 - [TEST_STEP][PASSED] - isElement1Present = getText().contains("Support Home"): null

2021-11-23 16:04:11 - [TEST_STEP][PASSED] - out.println(isElement1Present): null

2021-11-23 16:04:11 - [TEST_STEP][PASSED] - isElement2Present = getText().contains("Resources"): null

2021-11-23 16:04:12 - [TEST_STEP][PASSED] - out.println(isElement2Present): null

2021-11-23 16:04:12 - [TEST_STEP][PASSED] - isElement3Present = getText().contains("Product Manuals"): null

2021-11-23 16:04:12 - [TEST_STEP][PASSED] - out.println(isElement3Present): null

2021-11-23 16:04:12 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Product_Manuals_release_links")): Object 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is visible

2021-11-23 16:04:12 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is visible

2021-11-23 16:04:12 - [TEST_STEP][PASSED] - isSearchboxPresent = xpath("//*[@id='srch-term1']")).isDisplayed(): null

2021-11-23 16:04:13 - [TEST_STEP][PASSED] - out.println(isSearchboxPresent): null

2021-11-23 16:04:13 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/Searchbar_OR/Searchbox_in_product_manual_page"), "innovus"): Text 'innovus' is set on object 'Object Repository/Searchbar_OR/Searchbox_in_product_manual_page'

2021-11-23 16:04:13 - [MESSAGE][PASSED] - Text 'innovus' is set on object 'Object Repository/Searchbar_OR/Searchbox_in_product_manual_page'

2021-11-23 16:04:13 - [TEST_STEP][PASSED] - sendKeys(findTestObject("Searchbar_OR/Searchbox_in_product_manual_page"), Keys.chord(ENTER)): Keys 'ENTER + ' sent to object: 'Object Repository/Searchbar_OR/Searchbox_in_product_manual_page'

2021-11-23 16:04:16 - [MESSAGE][PASSED] - Keys 'ENTER + ' sent to object: 'Object Repository/Searchbar_OR/Searchbox_in_product_manual_page'

2021-11-23 16:04:16 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("Search_Result_Page_OR/Search_Area"), 5): Object 'Object Repository/Search_Result_Page_OR/Search_Area' is visible

2021-11-23 16:04:22 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Search_Area' is visible

2021-11-23 16:04:22 - [TEST_STEP][PASSED] - highlightedTextinlink = driver.findElements(By.xpath("//div[@class = 'coveo-result-list-container coveo-list-layout-container']//a[1]")): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - for ([i = 0, i < highlightedTextinlink.size(), (i++)]): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - titleText = getAttribute("title").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isitem1PresentinLink = titleText.contains("Innovus"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - for ([i = 0, i < 25, (i++)]): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - hrefText = getAttribute("href").toString(): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - isTextPresentinLink = hrefText.contains("techpub"): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - out.println(isTextPresentinLink): null

2021-11-23 16:04:23 - [TEST_STEP][PASSED] - Thread.sleep(5000): null

2021-11-23 16:04:28 - [TEST_STEP][PASSED] - back(): Navigate back successfully

2021-11-23 16:04:32 - [MESSAGE][PASSED] - Navigate back successfully

2021-11-23 16:04:32 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Product_Manuals_release_links"), 5): Object 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is visible

2021-11-23 16:04:34 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is visible

2021-11-23 16:04:34 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/Search_Result_Page_OR/Product_Manuals_release_links")): Object: 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is clicked on

2021-11-23 16:04:36 - [MESSAGE][PASSED] - Object: 'Object Repository/Search_Result_Page_OR/Product_Manuals_release_links' is clicked on

2021-11-23 16:04:36 - [TEST_STEP][PASSED] - isBreadcrumb2Present = xpath("//ul[@class = 'breadcrumb']")).isDisplayed(): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - out.println(isBreadcrumbPresent): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - isTerm1Present = getText().contains("Support Home"): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - out.println(isTerm1Present): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - isTerm2Present = getText().contains("Resources"): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - out.println(isTerm2Present): null

2021-11-23 16:04:39 - [TEST_STEP][PASSED] - isTerm3Present = getText().contains("Product Manuals"): null

2021-11-23 16:04:40 - [TEST_STEP][PASSED] - out.println(isTerm3Present): null

2021-11-23 16:04:40 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page")): Object 'Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page' is visible

2021-11-23 16:04:40 - [MESSAGE][PASSED] - Object 'Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page' is visible

2021-11-23 16:04:40 - [TEST_STEP][PASSED] - verifyElementAttributeValue(findTestObject("Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page"), "placeholder", "Search manuals for IC 6.1.8", 5): Object 'Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page' has attribute 'placeholder' with value 'Search manuals for IC 6.1.8'

2021-11-23 16:04:41 - [MESSAGE][PASSED] - Object 'Object Repository/Searchbar_OR/Searchbox_in_releaseLinks_Page' has attribute 'placeholder' with value 'Search manuals for IC 6.1.8'

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - links = driver.findElements(By.xpath("//*[@id='coveo-result-list1']//a[1]")): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - pdfIcons = driver.findElements(By.xpath("//i[@class = 'fa fa-file-pdf-o']")): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - for ([i = 0, i < pdfIcons.size(), (i++)]): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:41 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:42 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:43 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:44 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - isPdfIconVisible = get(i).isDisplayed(): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - out.println(isPdfIconVisible): null

2021-11-23 16:04:45 - [TEST_STEP][PASSED] - Thread.sleep(20000): null

2021-11-23 16:05:05 - [TEST_STEP][PASSED] - titleOfLink = getAttribute("title").toString(): null

2021-11-23 16:05:05 - [TEST_STEP][PASSED] - out.println(titleOfLink): null

2021-11-23 16:05:05 - [TEST_STEP][PASSED] - get(0).click(): null

2021-11-23 16:05:05 - [TEST_STEP][PASSED] - switchToWindowIndex(1): Switched to window with index: '1'

2021-11-23 16:05:05 - [MESSAGE][PASSED] - Switched to window with index: '1'

2021-11-23 16:05:05 - [TEST_STEP][PASSED] - Thread.sleep(10000): null

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - windowTitle = getWindowTitle(): Current window's title is: 'AMS Design and Model Validation User Guide -- Contents'

2021-11-23 16:05:15 - [MESSAGE][PASSED] - Current window's title is: 'AMS Design and Model Validation User Guide -- Contents'

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - out.println(windowTitle): null

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - isTitlePresent = windowTitle.contains(titleOfLink): null

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - out.println(isTitlePresent): null

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - closeWindowIndex(1): Window with index 1 is closed

2021-11-23 16:05:15 - [MESSAGE][PASSED] - Window with index 1 is closed

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - switchToWindowIndex(0): Switched to window with index: '0'

2021-11-23 16:05:15 - [MESSAGE][PASSED] - Switched to window with index: '0'

2021-11-23 16:05:15 - [TEST_STEP][PASSED] - Thread.sleep(5000): null

2021-11-23 16:05:20 - [TEST_STEP][PASSED] - initialTabs = new java.util.ArrayList(driver.getWindowHandles()): null

2021-11-23 16:05:20 - [TEST_STEP][PASSED] - out.println("Initial No. of tabs: " + initialTabs.size()): null

2021-11-23 16:05:20 - [TEST_STEP][PASSED] - get(0).click(): null

2021-11-23 16:05:20 - [TEST_STEP][PASSED] - Thread.sleep(5000): null

2021-11-23 16:05:25 - [TEST_STEP][PASSED] - currentTabs = new java.util.ArrayList(driver.getWindowHandles()): null

2021-11-23 16:05:25 - [TEST_STEP][PASSED] - out.println("Now No. of tabs are: " + currentTabs.size()): null

2021-11-23 16:05:25 - [TEST_STEP][PASSED] - closeWindowIndex(1): Window with index 1 is closed

2021-11-23 16:05:25 - [MESSAGE][PASSED] - Window with index 1 is closed

2021-11-23 16:05:25 - [TEST_STEP][PASSED] - switchToWindowIndex(0): Switched to window with index: '0'

2021-11-23 16:05:25 - [MESSAGE][PASSED] - Switched to window with index: '0'

2021-11-23 16:05:25 - [TEST_STEP][PASSED] - Thread.sleep(5000): null

2021-11-23 16:05:30 - [TEST_STEP][PASSED] - xpath("//div[@aria-label = 'Quick View']")).click(): null

2021-11-23 16:05:31 - [TEST_STEP][PASSED] - header = driver.findElement(By.xpath("//h1/div/div[2]/a")): null

2021-11-23 16:05:32 - [TEST_STEP][PASSED] - out.println("Modal Dialog text: " + header.getText()): null

2021-11-23 16:05:32 - [TEST_STEP][PASSED] - switchTo().frame(11): null

2021-11-23 16:05:32 - [TEST_STEP][PASSED] - searchedText = driver.findElement(By.xpath("//h5/center")): null

2021-11-23 16:05:32 - [TEST_STEP][PASSED] - isTextPresent = getText().contains("Product Version IC6.1.8"): null

2021-11-23 16:05:33 - [TEST_STEP][PASSED] - out.println(isTextPresent): null

2021-11-23 16:05:33 - [TEST_STEP][PASSED] - Thread.sleep(5000): null

2021-11-23 16:05:38 - [TEST_STEP][PASSED] - switchTo().defaultContent(): null

2021-11-23 16:05:38 - [TEST_STEP][PASSED] - xpath("/html/body/div[19]/div/header/span")).click(): null

2021-11-23 16:05:38 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Alphabet_location")): Object 'Object Repository/Search_Result_Page_OR/Alphabet_location' is visible

2021-11-23 16:05:38 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Alphabet_location' is visible

2021-11-23 16:05:38 - [TEST_STEP][PASSED] - alphabets = driver.findElements(By.xpath("//ul[@class = 'coveo-custom-glossary-content']/li/a")): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - c = "A": null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([i = 0, i < 26, (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'A' and expected text 'A' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'A' and expected text 'A' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'B' and expected text 'B' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'B' and expected text 'B' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'C' and expected text 'C' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'C' and expected text 'C' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'D' and expected text 'D' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'D' and expected text 'D' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'E' and expected text 'E' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'E' and expected text 'E' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'F' and expected text 'F' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'F' and expected text 'F' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'G' and expected text 'G' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'G' and expected text 'G' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'H' and expected text 'H' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'H' and expected text 'H' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'I' and expected text 'I' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'I' and expected text 'I' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'J' and expected text 'J' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'J' and expected text 'J' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'K' and expected text 'K' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'K' and expected text 'K' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'L' and expected text 'L' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'L' and expected text 'L' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'M' and expected text 'M' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'M' and expected text 'M' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'N' and expected text 'N' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'N' and expected text 'N' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'O' and expected text 'O' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'O' and expected text 'O' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'P' and expected text 'P' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'P' and expected text 'P' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'Q' and expected text 'Q' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'Q' and expected text 'Q' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'R' and expected text 'R' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'R' and expected text 'R' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'S' and expected text 'S' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'S' and expected text 'S' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'T' and expected text 'T' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'T' and expected text 'T' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'U' and expected text 'U' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'U' and expected text 'U' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'V' and expected text 'V' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'V' and expected text 'V' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'W' and expected text 'W' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'W' and expected text 'W' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'X' and expected text 'X' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'X' and expected text 'X' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'Y' and expected text 'Y' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'Y' and expected text 'Y' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - while (c <= "Z"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - text = getText().toString(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - isLetterPresent = verifyMatch(text, c, false): Actual text 'Z' and expected text 'Z' are matched 

2021-11-23 16:05:39 - [MESSAGE][PASSED] - Actual text 'Z' and expected text 'Z' are matched 

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(isLetterPresent): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - (c++): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([i = 0, i < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:39 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:40 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:41 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstText = get(i).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - secondText = get(j).getText(): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(secondText): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf1stSentenece = firstText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - firstLetterOf2ndSentence = secondText.charAt(0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf1stSentenece): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println(firstLetterOf2ndSentence): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - if (firstLetterOf1stSentenece.compareTo(firstLetterOf2ndSentence) <= 0): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - out.println("First text is less than or equals to the second text"): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - for ([j = i + 1, j < links.size(), (i++)]): null

2021-11-23 16:05:42 - [TEST_STEP][PASSED] - Thread.sleep(135000): null

2021-11-23 16:07:57 - [TEST_STEP][PASSED] - j = driver: null

2021-11-23 16:07:57 - [TEST_STEP][PASSED] - v = j.executeScript("return window.pageYOffset;"): null

2021-11-23 16:07:57 - [TEST_STEP][PASSED] - out.println("Scroll position after launch: " + v): null

2021-11-23 16:07:57 - [TEST_STEP][PASSED] - idValue = xpath("//li[@class = 'letter available'][7]//a")).getText(): null

2021-11-23 16:07:58 - [TEST_STEP][PASSED] - xpath("//li[@class = 'letter available'][7]//a")).click(): null

2021-11-23 16:07:58 - [TEST_STEP][PASSED] - Thread.sleep(2000): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - js = driver: null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - scrollLocation = js.executeScript("return window.pageYOffset;"): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - out.println("Scroll position after scrolling upto an element: " + scrollLocation): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - pBlock = driver.findElement(By.id(idValue)): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - classname = pBlock.getLocation(): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - ycordi = classname.getY(): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - out.println("Element's Position from top " + ycordi + " pixels."): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - isLocationSame = verifyEqual(scrollLocation, ycordi): Actual object '1,836' and expected object '1,836' are equal

2021-11-23 16:08:00 - [MESSAGE][PASSED] - Actual object '1,836' and expected object '1,836' are equal

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - out.println(isLocationSame): null

2021-11-23 16:08:00 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CommonTestCases/TC-DynamicNavigationLinks"), ["FacetToCheck":Facet_1_To_Check, "TitleOfTheFacet":Title_Of_The_Facet_1, "LinksOfTheFacet":Links_Of_The_Facet_1, "LinkToCheck":Facet_1_Link_4, ... ], STOP_ON_FAILURE): Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully

2021-11-23 16:08:00 - [TEST_CASE][PASSED] - Test Cases/CommonTestCases/TC-DynamicNavigationLinks: Test Cases/CommonTestCases/TC-DynamicNavigationLinks

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - facetToBeChecked = driver.findElement(By.xpath(FacetToCheck)): null

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - isFacetVisible = facetToBeChecked.isDisplayed(): null

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - out.println(isFacetVisible): null

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - isMatchTrue = verifyMatch(TitleOfTheFacet, facetToBeChecked.getAttribute("data-title"), false): Actual text 'All Products' and expected text 'All Products' are matched 

2021-11-23 16:08:01 - [MESSAGE][PASSED] - Actual text 'All Products' and expected text 'All Products' are matched 

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - out.println(isMatchTrue): null

2021-11-23 16:08:01 - [TEST_STEP][PASSED] - isLinksVisible = xpath(LinksOfTheFacet)).isDisplayed(): null

2021-11-23 16:08:02 - [TEST_STEP][PASSED] - out.println(isLinksVisible): null

2021-11-23 16:08:02 - [TEST_STEP][PASSED] - if (TitleOfTheFacet == "All Products"): Web element with id: 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' located by 'By.xpath: //div[@class= 'coveo-breadcrumb-items']/div/span' is not present after '5' second(s)

2021-11-23 16:08:02 - [TEST_STEP][PASSED] - titleText1 = xpath("//div[@data-title = 'All Products']/ul/li[1]")).getAttribute("data-value"): null

2021-11-23 16:08:02 - [TEST_STEP][PASSED] - titleText2 = xpath("//div[@data-title = 'All Products']/ul/li[2]")).getAttribute("data-value"): null

2021-11-23 16:08:02 - [TEST_STEP][PASSED] - xpath("//div[@data-title = 'All Products']/ul/li[1]")).click(): null

2021-11-23 16:08:03 - [TEST_STEP][PASSED] - xpath("//div[@data-title = 'All Products']/ul/li[2]")).click(): null

2021-11-23 16:08:05 - [TEST_STEP][PASSED] - isOption1Present = verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Platform_Value_location1"), titleText1): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Platform_Value_location1' are matched.

2021-11-23 16:08:07 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Platform_Value_location1' are matched.

2021-11-23 16:08:07 - [TEST_STEP][PASSED] - out.println(isOption1Present): null

2021-11-23 16:08:07 - [TEST_STEP][PASSED] - isOption2Present = verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Platform_Value_location2"), titleText2): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Platform_Value_location2' are matched.

2021-11-23 16:08:08 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Platform_Value_location2' are matched.

2021-11-23 16:08:08 - [TEST_STEP][PASSED] - out.println(isOption2Present): null

2021-11-23 16:08:08 - [TEST_STEP][PASSED] - xpath("//div[@data-title = 'All Products']/ul/li[1]")).click(): null

2021-11-23 16:08:08 - [TEST_STEP][PASSED] - xpath("//div[@data-title = 'All Products']/ul/li[2]")).click(): null

2021-11-23 16:08:10 - [TEST_STEP][PASSED] - Thread.sleep(4000): null

2021-11-23 16:08:14 - [TEST_STEP][PASSED] - verifyElementNotPresent(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area"), 5): Web element with id: 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' located by 'By.xpath: //div[@class= 'coveo-breadcrumb-items']/div/span' is not present after '5' second(s)

2021-11-23 16:08:14 - [MESSAGE][PASSED] - Web element with id: 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' located by 'By.xpath: //div[@class= 'coveo-breadcrumb-items']/div/span' is not present after '5' second(s)

2021-11-23 16:08:14 - [TEST_STEP][PASSED] - actualTitle = xpath(LinkToCheck)).getAttribute("data-value"): null

2021-11-23 16:08:15 - [TEST_STEP][PASSED] - out.println(actualTitle): null

2021-11-23 16:08:15 - [TEST_STEP][PASSED] - xpath(LinkToCheck)).click(): null

2021-11-23 16:08:15 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area")): Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:17 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:17 - [TEST_STEP][PASSED] - verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area"), TitleOfTheFacet + ":"): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:17 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:17 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location")): Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:18 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - istitleTrue = verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location"), actualTitle): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:18 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(istitleTrue): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - highlightedTextinlink = driver.findElements(By.xpath("//div[@class = 'coveo-result-list-container coveo-list-layout-container']//a")): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - for ([i = 0, i < highlightedTextinlink.size(), (i++)]): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:08:18 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/Search_Result_Page_OR/Clear_option")): Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:19 - [MESSAGE][PASSED] - Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:19 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully

2021-11-23 16:08:19 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CommonTestCases/TC-DynamicNavigationLinks"), ["FacetToCheck":Facet_2_To_Check, "TitleOfTheFacet":Title_Of_The_Facet_2, "LinksOfTheFacet":Links_Of_The_Facet_2, "LinkToCheck":Facet_2_Link_4, ... ], STOP_ON_FAILURE): Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully

2021-11-23 16:08:19 - [TEST_CASE][PASSED] - Test Cases/CommonTestCases/TC-DynamicNavigationLinks: Test Cases/CommonTestCases/TC-DynamicNavigationLinks

2021-11-23 16:08:19 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2021-11-23 16:08:19 - [TEST_STEP][PASSED] - facetToBeChecked = driver.findElement(By.xpath(FacetToCheck)): null

2021-11-23 16:08:20 - [TEST_STEP][PASSED] - isFacetVisible = facetToBeChecked.isDisplayed(): null

2021-11-23 16:08:20 - [TEST_STEP][PASSED] - out.println(isFacetVisible): null

2021-11-23 16:08:20 - [TEST_STEP][PASSED] - isMatchTrue = verifyMatch(TitleOfTheFacet, facetToBeChecked.getAttribute("data-title"), false): Actual text 'All Groups' and expected text 'All Groups' are matched 

2021-11-23 16:08:20 - [MESSAGE][PASSED] - Actual text 'All Groups' and expected text 'All Groups' are matched 

2021-11-23 16:08:20 - [TEST_STEP][PASSED] - out.println(isMatchTrue): null

2021-11-23 16:08:20 - [TEST_STEP][PASSED] - isLinksVisible = xpath(LinksOfTheFacet)).isDisplayed(): null

2021-11-23 16:08:21 - [TEST_STEP][PASSED] - out.println(isLinksVisible): null

2021-11-23 16:08:21 - [TEST_STEP][PASSED] - if (TitleOfTheFacet == "All Products"): null

2021-11-23 16:08:21 - [TEST_STEP][PASSED] - actualTitle = xpath(LinkToCheck)).getAttribute("data-value"): null

2021-11-23 16:08:21 - [TEST_STEP][PASSED] - out.println(actualTitle): null

2021-11-23 16:08:21 - [TEST_STEP][PASSED] - xpath(LinkToCheck)).click(): null

2021-11-23 16:08:22 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area")): Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:23 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:23 - [TEST_STEP][PASSED] - verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area"), TitleOfTheFacet + ":"): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:24 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:24 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location")): Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:24 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:24 - [TEST_STEP][PASSED] - istitleTrue = verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location"), actualTitle): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:24 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:24 - [TEST_STEP][PASSED] - out.println(istitleTrue): null

2021-11-23 16:08:24 - [TEST_STEP][PASSED] - highlightedTextinlink = driver.findElements(By.xpath("//div[@class = 'coveo-result-list-container coveo-list-layout-container']//a")): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - for ([i = 0, i < highlightedTextinlink.size(), (i++)]): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/Search_Result_Page_OR/Clear_option")): Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:25 - [MESSAGE][PASSED] - Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:25 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CommonTestCases/TC-DynamicNavigationLinks"), ["FacetToCheck":Facet_3_To_Check, "TitleOfTheFacet":Title_Of_The_Facet_3, "LinksOfTheFacet":Links_Of_The_Facet_3, "LinkToCheck":Facet_3_Link_1, ... ], STOP_ON_FAILURE): Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully

2021-11-23 16:08:25 - [TEST_CASE][PASSED] - Test Cases/CommonTestCases/TC-DynamicNavigationLinks: Test Cases/CommonTestCases/TC-DynamicNavigationLinks

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2021-11-23 16:08:25 - [TEST_STEP][PASSED] - facetToBeChecked = driver.findElement(By.xpath(FacetToCheck)): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - isFacetVisible = facetToBeChecked.isDisplayed(): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - out.println(isFacetVisible): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - isMatchTrue = verifyMatch(TitleOfTheFacet, facetToBeChecked.getAttribute("data-title"), false): Actual text 'All Document Types' and expected text 'All Document Types' are matched 

2021-11-23 16:08:27 - [MESSAGE][PASSED] - Actual text 'All Document Types' and expected text 'All Document Types' are matched 

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - out.println(isMatchTrue): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - isLinksVisible = xpath(LinksOfTheFacet)).isDisplayed(): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - out.println(isLinksVisible): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - if (TitleOfTheFacet == "All Products"): null

2021-11-23 16:08:27 - [TEST_STEP][PASSED] - actualTitle = xpath(LinkToCheck)).getAttribute("data-value"): null

2021-11-23 16:08:28 - [TEST_STEP][PASSED] - out.println(actualTitle): null

2021-11-23 16:08:28 - [TEST_STEP][PASSED] - xpath(LinkToCheck)).click(): null

2021-11-23 16:08:28 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area")): Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:30 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' is visible

2021-11-23 16:08:30 - [TEST_STEP][PASSED] - verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area"), TitleOfTheFacet + ":"): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:30 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Coveo_breadcrumb_item_area' are matched.

2021-11-23 16:08:30 - [TEST_STEP][PASSED] - verifyElementVisible(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location")): Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:31 - [MESSAGE][PASSED] - Object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' is visible

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - istitleTrue = verifyElementText(findTestObject("Object Repository/Search_Result_Page_OR/Selected_Platform_value_location"), actualTitle): Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:31 - [MESSAGE][PASSED] - Actual text and expected text of test object 'Object Repository/Search_Result_Page_OR/Selected_Platform_value_location' are matched.

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - out.println(istitleTrue): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - highlightedTextinlink = driver.findElements(By.xpath("//div[@class = 'coveo-result-list-container coveo-list-layout-container']//a")): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - for ([i = 0, i < highlightedTextinlink.size(), (i++)]): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - isitem1PresentinLink = getText().contains(expectedsearchedText1): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - isitem2PresentinLink = getText().contains(expectedsearchedText2): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - out.println(isitem1PresentinLink): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - out.println(isitem2PresentinLink): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - if (isitem1PresentinLink == true): null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - break: null

2021-11-23 16:08:31 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/Search_Result_Page_OR/Clear_option")): Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:32 - [MESSAGE][PASSED] - Object: 'Object Repository/Search_Result_Page_OR/Clear_option' is clicked on

2021-11-23 16:08:32 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CommonTestCases/TC-DynamicNavigationLinks' successfully]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <system-out><![CDATA[2021-11-23 16:03:28 - [TEST_SUITE][PASSED] - TestSuite_6: Test Cases/TC-06-VerifyProductManuals]]></system-out>
      <system-err><![CDATA[]]></system-err>
   </testsuite>
</testsuites>
